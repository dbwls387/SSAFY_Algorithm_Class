// DP 연습문제 1 아파트 색칠하기 

package Class.D_0929;

import java.util.Arrays;

// 아파트를 각 층 별로 파란색 또는 노란색 페인트로 칠하되 다음과 같은 규칙으로 칠하려고 한다. 
// - 노란색은 인접한 두 층에 연속하여 사용할 수 있다. 
// - 파란색은 인접한 두 층에 연속하여 사용할 수 없다. 
// 이와 같은 규칙으로 층의 아파트를 칠할 수 있는 방법의 수를 f(n)이라 하면 다음 그림과 같이 f(1)=2, f(2)=3 이다. 
// 이 때, f(8)은 얼마인가?

// f(1) 노랑	파랑

// f(2) 노랑	파랑	노랑	
//		노랑	노랑	파랑

// 이전 단게보다 더 늘어나는 수는, 이전 단계의 노란색의 수만큼 늘어난다. (노랑 -> 노랑 효과) 
// 이전 단계의 노란색의 수는? => 한단계 더 이전 단계의 수 <= 한단계 더 이전 단계의 수 모두에 

// f(3)은 f(2) 단계의 노란색 수만큼 늘어난다. 
// f(3)은 f(2) 단계의 노란색 수 => f(1)의 수 => 노란색은 모든 이전 단계만큼 늘어난다. 
// f(4)은 f(3) 단계의 노란색 수 => f(2)의 수 => 노란색은 모든 이전 단계만큼 늘어난다.

public class dp_basic_Problem1 {

	static int[] memoi = new int[11]; // 0 dummy

	public static void main(String[] args) {
		// 초기 시작 data
		memoi[1] = 2;
		memoi[2] = 3;

		// target 번호 (인덱스) 
		for (int i = 3; i <= 10; i++) {
			// 규칙 (수식)을 i라는 일반화된 식으로 표현
			// 현재 (i) 의 경우의 수 = 이전 (i-1) 의 경우의 수 + 하나 더 이전 (i-2) 의 경우의 수 합
			memoi[i] = memoi[i - 1] + memoi[i - 2];
		}

		System.out.println(Arrays.toString(memoi));
	}

}

// DP 속도가 엄청 빠르다. 
// 코드가 간결하다. 

// 완탐으로 어던 문제를 푸는 데 시간초과 
// => 그리디 (검증된 수식, ...) 
// => dp
